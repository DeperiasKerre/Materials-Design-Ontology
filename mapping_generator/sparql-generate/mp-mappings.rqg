BASE <https://w3id.org/mdo/data/1.0/>
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fun: <http://w3id.org/sparql-generate/fn/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX core: <https://w3id.org/mdo/core/>
PREFIX structure: <https://w3id.org/mdo/structure/>
PREFIX calculation: <https://w3id.org/mdo/calculation/>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX provenance: <https://w3id.org/mdo/provenance/>
PREFIX emmo: <http://emmo.info/domains/emmo-material.owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX CHEBI-atom: <http://purl.obolibrary.org/obo/CHEBI_33250>
PREFIX CHEBI-formula: <http://purl.obolibrary.org/obo/chebi/formula>
PREFIX QUDT-Unit: <http://qudt.org/vocab/unit/>
PREFIX QUDT: <http://qudt.org/schema/qudt/>


GENERATE {
	?calculation a core:Calculation;
	core:hasID ?TASK_ID;
	core:hasInputStructure ?input_structure;
	core:hasOutputStructure ?output_structure;
	prov:wasAssociatedWith ?NODE_softwareagent;
	core:hasOutputCalculatedProperty ?NODE_density;
	core:hasOutputCalculatedProperty ?NODE_band_gap;
	core:hasOutputCalculatedProperty ?NODE_final_energy;
	core:hasOutputCalculatedProperty ?NODE_final_energy_per_atom;
	core:hasOutputCalculatedProperty ?NODE_formation_energy_per_atom;
	GENERATE{
	  	?material a emmo:Material	  		
	  	}.
	GENERATE{
	  	?NODE_composition a structure:Composition;
	  	structure:hasDescriptiveFormula ?full_formula;
	  	structure:hasAnonymous_formula ?anonymous_formula;
	  	}. 
	GENERATE {
	  	?input_structure a core:Structure;
	  	core:relatesToMaterial ?material;
	  	structure:hasLattice ?NODE_inputlattice;
	  	structure:hasOccupancy ?input_occupancy;
	  	structure:hasComposition ?NODE_composition;
	  	GENERATE{
	  		?NODE_inputlattice a structure:Lattice;
	  		structure:hasLatticeVolume ?input_lattice_volume;
	  		structure:hasAxisVectors ?NODE_inputlattice_axisvector;
	  		structure:hasAngleTriple ?NODE_inputlattice_angletriple;
	  		structure:hasLengthTriple ?NODE_inputlattice_lengthtriple
	  		GENERATE{
	  			?NODE_inputlattice_axisvector a structure:AxisVectors;
	  			structure:has_a_axisVector ?NODE_input_a_axis_coordinateVector;
	  			structure:has_b_axisVector ?NODE_input_b_axis_coordinateVector;
	  			structure:has_c_axisVector ?NODE_input_c_axis_coordinateVector;
	  			GENERATE{
	  				?NODE_input_a_axis_coordinateVector a structure:CoordinateVector;
	  				structure:hasX_axisCoordinate ?input_lattice_a_x_coordinate;
	  				structure:hasY_axisCoordinate ?input_lattice_a_y_coordinate;
	  				structure:hasZ_axisCoordinate ?input_lattice_a_z_coordinate;
	  				}.
	  			GENERATE{
	  				?NODE_input_b_axis_coordinateVector a structure:CoordinateVector;
	  				structure:hasX_axisCoordinate ?input_lattice_b_x_coordinate;
	  				structure:hasY_axisCoordinate ?input_lattice_b_y_coordinate;
	  				structure:hasZ_axisCoordinate ?input_lattice_b_z_coordinate;
	  				}.
	  			GENERATE{
	  				?NODE_input_c_axis_coordinateVector a structure:CoordinateVector;
	  				structure:hasX_axisCoordinate ?input_lattice_c_x_coordinate;
	  				structure:hasY_axisCoordinate ?input_lattice_c_y_coordinate;
	  				structure:hasZ_axisCoordinate ?input_lattice_c_z_coordinate;
	  				}.
	  		} .
	  		GENERATE{
	  			?NODE_inputlattice_angletriple a structure:AngleTriple;
	  			structure:hasAngle_alpha ?input_lattice_angle_alpha;
	  			structure:hasAngle_beta ?input_lattice_angle_beta;
	  			structure:hasAngle_gamma ?input_lattice_angle_gamma
	  		} .
	  		GENERATE{
	  			?NODE_inputlattice_lengthtriple a structure:LengthTriple;
	  			structure:hasLength_a ?input_lattice_length_A;
	  			structure:hasLength_b ?input_lattice_length_B;
	  			structure:hasLength_c ?input_lattice_length_C
	  		} .
	  	}.

	  	GENERATE{
	  		?input_occupancy a structure:Occupancy;
	  		structure:hasSite ?NODE_site;
	  		structure:hasSpecies ?NODE_species;
	  		GENERATE {
	  			?NODE_site a structure:Site;
	  			structure:hasFractionalCoordinates ?NODE_site_fractional_coordinates;
	  			structure:hasCartesianCoordinates ?NODE_site_cartesian_coordinates
	  			GENERATE{
	  				?NODE_site_fractional_coordinates a structure:CoordinateVector;
	  				structure:hasX_axisCoordinate ?fractional_coordinate_x;
	  				structure:hasY_axisCoordinate ?fractional_coordinate_y;
	  				structure:hasZ_axisCoordinate ?fractional_coordinate_z;
	  			}.
	  			GENERATE{
	  				?NODE_site_cartesian_coordinates a structure:CoordinateVector;
	  				structure:hasX_axisCoordinate ?cartesian_coordinate_x;
	  				structure:hasY_axisCoordinate ?cartesian_coordinate_y;
	  				structure:hasZ_axisCoordinate ?cartesian_coordinate_z;
	  			}.
	  		}.
	  		GENERATE{
	  			?NODE_species a structure:species;
	  			structure:hasElement ?NODE_atom;
	  			structure:hasElementRatio ?species_element_ratio;
	  			GENERATE{
	  				?NODE_atom a CHEBI-atom:;
	  				CHEBI-formula: ?species_element;
	  				}.
	  		}
	  		ITERATOR iter:JSONPath(?species, "$[*]") AS ?elements
	  		WHERE{
	  			BIND(BNODE() AS ?NODE_atom)
	  			BIND(fun:JSONPath(?elements, "$.element") AS ?species_element)
	  			BIND(fun:JSONPath(?elements, "$.occu") AS ?species_element_ratio)
	  		}
	  		.
	  	}
	  	ITERATOR iter:JSONPath(?input_sites, "$[*]") AS ?site
			WHERE {
	    		#BIND(<{?TASK_ID}_input_structure_occupancy_sites> AS ?NODE_site)
	    		BIND(BNODE() AS ?NODE_site)
	    		BIND(BNODE() AS ?NODE_species)
	    		BIND(BNODE() AS ?NODE_site_fractional_coordinates)
	    		BIND(BNODE() AS ?NODE_site_cartesian_coordinates)
	    		BIND(fun:JSONPath(?site, "$.species") AS ?species)
	    		BIND(fun:JSONPath(?site, "$.abc") AS ?abc)
	    		BIND(fun:JSONPath(?site, "$.abc[0]") AS ?fractional_coordinate_x)
	    		BIND(fun:JSONPath(?site, "$.abc[1]") AS ?fractional_coordinate_y)
	    		BIND(fun:JSONPath(?site, "$.abc[2]") AS ?fractional_coordinate_z)
	    		BIND(fun:JSONPath(?site, "$.xyz") AS ?xyz)
	    		BIND(fun:JSONPath(?site, "$.xyz[0]") AS ?cartesian_coordinate_x)
	    		BIND(fun:JSONPath(?site, "$.xyz[1]") AS ?cartesian_coordinate_y)
	    		BIND(fun:JSONPath(?site, "$.xyz[2]") AS ?cartesian_coordinate_z)
	    		BIND(fun:JSONPath(?site, "$.label") AS ?element)
			}.	
	}.

	GENERATE{
	  	?reference a provenance:ReferenceAgent;
	  	provenance:hasDatabaseName "Materials Project";
	  	provenance:hasDOI ?doi;
	  	provenance:hasAuthorName ?author_name;
	  	provenance:hasPublicationDateTime ?datetime;
	  	}
	  	ITERATOR iter:JSONPath(?authors_list, "$[*]") AS ?author
	  	WHERE{
	  		BIND(fun:JSONPath(?author, ".name") AS ?author_name)
	  	}.
	GENERATE{
		?NODE_band_gap a core:CalculatedProperty;
		a QUDT:Quantity;
		core:hasPropertyName "band_gap";
		prov:wasAttributedTo ?reference;
		core:relatedToStructure ?output_structure ;
		QUDT:quantityValue ?NODE_band_gap_quantity_value
		GENERATE{
			?NODE_band_gap_quantity_value a QUDT:QuantityValue;
			QUDT:unit QUDT-Unit:EV;
			QUDT:numericValue ?band_gap
		}.
	}.
	
	GENERATE{
		?NODE_final_energy a core:CalculatedProperty;
		a QUDT:Quantity;
		core:hasPropertyName "final_energy";
		prov:wasAttributedTo ?reference;
		core:relatedToStructure ?output_structure;
		QUDT:quantityValue ?NODE_final_energy_quantity_value
		}.
	GENERATE{
		?NODE_final_energy_quantity_value a QUDT:QuantityValue;
		QUDT:unit QUDT-Unit:EV;
		QUDT:numericValue ?final_energy
		}.
	GENERATE{
		?NODE_final_energy_per_atom a core:CalculatedProperty;
		a QUDT:Quantity;
		core:hasPropertyName "final_energy_per_atom";
		prov:wasAttributedTo ?reference;
		core:relatedToStructure ?output_structure;
		QUDT:quantityValue ?NODE_final_energy_per_atom_quantity_value
		}.
	GENERATE{
		?NODE_final_energy_per_atom_quantity_value a QUDT:QuantityValue;
		QUDT:unit QUDT-Unit:EV;
		QUDT:numericValue ?final_energy_per_atom
		}.
	GENERATE{
		?NODE_formation_energy_per_atom a core:CalculatedProperty;
		a QUDT:Quantity;
		core:hasPropertyName "formation_energy_per_atom";
		prov:wasAttributedTo ?reference;
		core:relatedToStructure ?output_structure;
		QUDT:quantityValue ?NODE_formation_energy_per_atom_quantity_value
		}.
	GENERATE{
		?NODE_formation_energy_per_atom_quantity_value a QUDT:QuantityValue;
		QUDT:unit QUDT-Unit:EV;
		QUDT:numericValue ?formation_energy_per_atom
		}.
	GENERATE{
		?NODE_density a core:CalculatedProperty;
		a QUDT:Quantity;
		core:hasPropertyName "density";
		prov:wasAttributedTo ?reference;
		core:relatedToStructure ?output_structure;
		QUDT:quantityValue ?NODE_density_quantity_value
		}.
	GENERATE{
		?NODE_density_quantity_value a QUDT:QuantityValue;
		QUDT:unit QUDT-Unit:GM-PER-CentiM3;
		QUDT:numericValue ?density
		}.


# Following is output structure:

	GENERATE {
	  	?output_structure a core:Structure;
	  	core:relatesToMaterial ?material;
	  	structure:hasLattice ?NODE_outputlattice;
	  	structure:hasOccupancy ?output_occupancy;
	  	structure:hasComposition ?NODE_composition;
	  	prov:wasAttributedTo ?reference;
		core:hasOutputCalculatedProperty ?NODE_density;
		core:hasOutputCalculatedProperty ?NODE_band_gap;
		core:hasOutputCalculatedProperty ?NODE_final_energy;
		core:hasOutputCalculatedProperty ?NODE_final_energy_per_atom;
		core:hasOutputCalculatedProperty ?NODE_formation_energy_per_atom;
		structure:hasSpaceGroup ?NODE_output_sg
	  	GENERATE{
	  		?NODE_output_sg a structure:SpaceGroup;
	  		structure:hasSpaceGroupID ?output_sg_id;
	  		structure:hasSpaceGroupSymbol ?output_sg_symbol;
	  		structure:hasPointGroup ?NODE_output_pg
	  		GENERATE{
	  			?NODE_output_pg a structure:PointGroup;
	  			structure:hasPointGroupHMName ?output_pg_name
	  			}.
	  		}.
	  	GENERATE{
	  		?NODE_outputlattice a structure:Lattice;
	  		structure:hasLatticeVolume ?output_lattice_volume;
	  		structure:hasLatticeType ?output_lattice_type;
	  		structure:hasAxisVectors ?NODE_outputlattice_axisvector;
	  		structure:hasAngleTriple ?NODE_outputlattice_angletriple;
	  		structure:hasLengthTriple ?NODE_outputlattice_lengthTriple;
	  		GENERATE{
	  			?NODE_outputlattice_axisvector a structure:AxisVectors;
	  			structure:has_a_axisVector ?NODE_output_a_axis_coordinateVector;
	  			structure:has_b_axisVector ?NODE_output_b_axis_coordinateVector;
	  			structure:has_c_axisVector ?NODE_output_c_axis_coordinateVector;
	  			GENERATE{
	  				?NODE_output_a_axis_coordinateVector a structure:CoordinateVector;
	  				structure:hasX_axisCoordinate ?output_lattice_a_x_coordinate;
	  				structure:hasY_axisCoordinate ?output_lattice_a_y_coordinate;
	  				structure:hasZ_axisCoordinate ?output_lattice_a_z_coordinate;
	  				}.
	  			GENERATE{
	  				?NODE_output_b_axis_coordinateVector a structure:CoordinateVector;
	  				structure:hasX_axisCoordinate ?output_lattice_b_x_coordinate;
	  				structure:hasY_axisCoordinate ?output_lattice_b_y_coordinate;
	  				structure:hasZ_axisCoordinate ?output_lattice_b_z_coordinate;
	  				}.
	  			GENERATE{
	  				?NODE_output_c_axis_coordinateVector a structure:CoordinateVector;
	  				structure:hasX_axisCoordinate ?output_lattice_c_x_coordinate;
	  				structure:hasY_axisCoordinate ?output_lattice_c_y_coordinate;
	  				structure:hasZ_axisCoordinate ?output_lattice_c_z_coordinate;
	  				}.
	  		} .
	  		GENERATE{
	  			?NODE_outputlattice_angletriple a structure:AngleTriple;
	  			structure:hasAngle_alpha ?output_lattice_angle_alpha;
	  			structure:hasAngle_beta ?output_lattice_angle_beta;
	  			structure:hasAngle_gamma ?output_lattice_angle_gamma
	  		} .
	  		GENERATE{
	  			?NODE_outputlattice_lengthtriple a structure:LengthTriple;
	  			structure:hasLength_a ?output_lattice_length_A;
	  			structure:hasLength_b ?output_lattice_length_B;
	  			structure:hasLength_c ?output_lattice_length_C
	  		} .
	  	}.

	  	GENERATE{
	  		?output_occupancy a structure:Occupancy;
	  		structure:hasSite ?NODE_site;
	  		structure:hasSpecies ?NODE_species;
	  		GENERATE {
	  			?NODE_site a structure:Site;
	  			structure:hasFractionalCoordinates ?NODE_site_fractional_coordinates;
	  			structure:hasCartesianCoordinates ?NODE_site_cartesian_coordinates
	  			GENERATE{
	  				?NODE_site_fractional_coordinates a structure:CoordinateVector;
	  				structure:hasX_axisCoordinate ?fractional_coordinate_x;
	  				structure:hasY_axisCoordinate ?fractional_coordinate_y;
	  				structure:hasZ_axisCoordinate ?fractional_coordinate_z;
	  			}.
	  			GENERATE{
	  				?NODE_site_cartesian_coordinates a structure:CoordinateVector;
	  				structure:hasX_axisCoordinate ?cartesian_coordinate_x;
	  				structure:hasY_axisCoordinate ?cartesian_coordinate_y;
	  				structure:hasZ_axisCoordinate ?cartesian_coordinate_z;
	  			}.
	  		}.
	  		GENERATE{
	  			?NODE_species a structure:species;
	  			structure:hasElement ?NODE_atom;
	  			structure:hasElementRatio ?species_element_ratio;
	  			GENERATE{
	  				?NODE_atom a CHEBI-atom:;
	  				CHEBI-formula: ?species_element;
	  				}.
	  		}
	  		ITERATOR iter:JSONPath(?species, "$[*]") AS ?elements
	  		WHERE{
	  			BIND(BNODE() AS ?NODE_atom)
	  			BIND(fun:JSONPath(?elements, "$.element") AS ?species_element)
	  			BIND(fun:JSONPath(?elements, "$.occu") AS ?species_element_ratio)
	  		}
	  		.
	  	}
	  	ITERATOR iter:JSONPath(?output_sites, "$[*]") AS ?site
			WHERE {
	    		#BIND(<{?TASK_ID}_input_structure_occupancy_sites> AS ?NODE_site)
	    		BIND(BNODE() AS ?NODE_site)
	    		BIND(BNODE() AS ?NODE_species)
	    		BIND(BNODE() AS ?NODE_site_fractional_coordinates)
	    		BIND(BNODE() AS ?NODE_site_cartesian_coordinates)
	    		BIND(fun:JSONPath(?site, "$.species") AS ?species)
	    		BIND(fun:JSONPath(?site, "$.abc") AS ?abc)
	    		BIND(fun:JSONPath(?site, "$.abc[0]") AS ?fractional_coordinate_x)
	    		BIND(fun:JSONPath(?site, "$.abc[1]") AS ?fractional_coordinate_y)
	    		BIND(fun:JSONPath(?site, "$.abc[2]") AS ?fractional_coordinate_z)
	    		BIND(fun:JSONPath(?site, "$.xyz") AS ?xyz)
	    		BIND(fun:JSONPath(?site, "$.xyz[0]") AS ?cartesian_coordinate_x)
	    		BIND(fun:JSONPath(?site, "$.xyz[1]") AS ?cartesian_coordinate_y)
	    		BIND(fun:JSONPath(?site, "$.xyz[2]") AS ?cartesian_coordinate_z)
	    		BIND(fun:JSONPath(?site, "$.label") AS ?element)
			}.	
	}.
}
SOURCE <http://example.com/intermediate.json> AS ?source
WHERE {
  BIND(fun:JSONPath(?source,"$.original_task_id") AS ?TASK_ID)
  BIND(fun:JSONPath(?source,"$._id") AS ?ID)
  BIND(fun:JSONPath(?source,"$.band_gap") AS ?band_gap)
  BIND(fun:JSONPath(?source,"$.final_energy") AS ?final_energy)
  BIND(fun:JSONPath(?source,"$.final_energy_per_atom") AS ?final_energy_per_atom)
  BIND(fun:JSONPath(?source,"$.formation_energy_per_atom") AS ?formation_energy_per_atom)
  BIND(fun:JSONPath(?source,"$.density") AS ?density)
  BIND(<{?TASK_ID}_band_gap> AS ?NODE_band_gap)
  BIND(BNODE() AS ?NODE_band_gap_quantity_value)
  BIND(<{?TASK_ID}_final_energy> AS ?NODE_final_energy)
  BIND(BNODE() AS ?NODE_final_energy_quantity_value)
  BIND(<{?TASK_ID}_final_energy_per_atom> AS ?NODE_final_energy_per_atom)
  BIND(BNODE() AS ?NODE_final_energy_per_atom_quantity_value)
  BIND(<{?TASK_ID}_formation_energy_per_atom> AS ?NODE_formation_energy_per_atom)
  BIND(BNODE() AS ?NODE_formation_energy_per_atom_quantity_value)
  BIND(<{?TASK_ID}_density> AS ?NODE_density)
  BIND(BNODE() AS ?NODE_density_quantity_value)
  BIND(<{?TASK_ID}_composition> AS ?NODE_composition)
  BIND(fun:JSONPath(?source,"$.full_formula") AS ?full_formula)
  BIND(fun:JSONPath(?source,"$.anonymous_formula") AS ?anonymous_formula)
  #BIND(<{?TASK_ID}_{?full_formula}> as ?iri)
  BIND(<{?TASK_ID}_calculation> as ?calculation)
  BIND(<{?TASK_ID}_reference> as ?reference)
  BIND(fun:JSONPath(?source,"$.snl_final.about.authors") AS ?authors_list)
  BIND(fun:JSONPath(?source,"$.doi") AS ?doi)
  BIND(fun:JSONPath(?source,"$.created_at") AS ?datetime)
  BIND(<{?TASK_ID}_input_structure> as ?input_structure)
  BIND(<{?TASK_ID}_output_structure> as ?output_structure)
  BIND(<{?TASK_ID}_input_occupancy> as ?input_occupancy)
  BIND(<{?TASK_ID}_output_occupancy> as ?output_occupancy)
  BIND(fun:JSONPath(?source,"$.initial_structure.sites")  AS ?input_sites)
  BIND(fun:JSONPath(?source, "$.initial_structure.lattice") AS ?input_lattice)
  BIND(<{?TASK_ID}_input_lattice>  AS ?NODE_inputlattice)
  BIND(<{?TASK_ID}_input_lattice_axisvector>  AS ?NODE_inputlattice_axisvector)
  BIND(<{?TASK_ID}_input_lattice_angletriple> AS ?NODE_inputlattice_angletriple)
  BIND(<{?TASK_ID}_input_lattice_lengthtriple> AS ?NODE_inputlattice_lengthtriple)
  BIND(fun:JSONPath(?input_lattice, "$.matrix[0][0]") AS ?input_lattice_a_x_coordinate)
  BIND(fun:JSONPath(?input_lattice, "$.matrix[0][1]") AS ?input_lattice_a_y_coordinate)
  BIND(fun:JSONPath(?input_lattice, "$.matrix[0][2]") AS ?input_lattice_a_z_coordinate)
  BIND(fun:JSONPath(?input_lattice, "$.matrix[1][0]") AS ?input_lattice_b_x_coordinate)
  BIND(fun:JSONPath(?input_lattice, "$.matrix[1][1]") AS ?input_lattice_b_y_coordinate)
  BIND(fun:JSONPath(?input_lattice, "$.matrix[1][2]") AS ?input_lattice_b_z_coordinate)
  BIND(fun:JSONPath(?input_lattice, "$.matrix[2][0]") AS ?input_lattice_c_x_coordinate)
  BIND(fun:JSONPath(?input_lattice, "$.matrix[2][1]") AS ?input_lattice_c_y_coordinate)
  BIND(fun:JSONPath(?input_lattice, "$.matrix[2][2]") AS ?input_lattice_c_z_coordinate)
  BIND(fun:JSONPath(?input_lattice, "$.a") AS ?input_lattice_length_A)
  BIND(fun:JSONPath(?input_lattice, "$.b") AS ?input_lattice_length_B)
  BIND(fun:JSONPath(?input_lattice, "$.c") AS ?input_lattice_length_C)
  BIND(fun:JSONPath(?input_lattice, "$.alpha") AS ?input_lattice_angle_alpha)
  BIND(fun:JSONPath(?input_lattice, "$.beta") AS ?input_lattice_angle_beta)
  BIND(fun:JSONPath(?input_lattice, "$.gamma") AS ?input_lattice_angle_gamma)
  BIND(fun:JSONPath(?input_lattice, "$.volume") AS ?input_lattice_volume)
  BIND(fun:JSONPath(?source,"$.snl_final.sites")  AS ?output_sites)
  BIND(fun:JSONPath(?source, "$.snl_final.lattice") AS ?output_lattice)
  BIND(<{?TASK_ID}_output_lattice> AS ?NODE_outputlattice)
  BIND(<{?TASK_ID}_output_lattice_axisvector> AS ?NODE_outputlattice_axisvector)
  BIND(<{?TASK_ID}_output_lattice_angletriple> AS ?NODE_outputlattice_angletriple)
  BIND(<{?TASK_ID}_output_lattice_lengthtriple> AS ?NODE_outputlattice_lengthtriple)
  BIND(fun:JSONPath(?output_lattice, "$.matrix[0][0]") AS ?output_lattice_a_x_coordinate)
  BIND(fun:JSONPath(?output_lattice, "$.matrix[0][1]") AS ?output_lattice_a_y_coordinate)
  BIND(fun:JSONPath(?output_lattice, "$.matrix[0][2]") AS ?output_lattice_a_z_coordinate)
  BIND(fun:JSONPath(?output_lattice, "$.matrix[1][0]") AS ?output_lattice_b_x_coordinate)
  BIND(fun:JSONPath(?output_lattice, "$.matrix[1][1]") AS ?output_lattice_b_y_coordinate)
  BIND(fun:JSONPath(?output_lattice, "$.matrix[1][2]") AS ?output_lattice_b_z_coordinate)
  BIND(fun:JSONPath(?output_lattice, "$.matrix[2][0]") AS ?output_lattice_c_x_coordinate)
  BIND(fun:JSONPath(?output_lattice, "$.matrix[2][1]") AS ?output_lattice_c_y_coordinate)
  BIND(fun:JSONPath(?output_lattice, "$.matrix[2][2]") AS ?output_lattice_c_z_coordinate)
  BIND(fun:JSONPath(?output_lattice, "$.a") AS ?output_lattice_length_A)
  BIND(fun:JSONPath(?output_lattice, "$.b") AS ?output_lattice_length_B)
  BIND(fun:JSONPath(?output_lattice, "$.c") AS ?output_lattice_length_C)
  BIND(fun:JSONPath(?output_lattice, "$.alpha") AS ?output_lattice_angle_alpha)
  BIND(fun:JSONPath(?output_lattice, "$.beta") AS ?output_lattice_angle_beta)
  BIND(fun:JSONPath(?output_lattice, "$.gamma") AS ?output_lattice_angle_gamma)
  BIND(fun:JSONPath(?output_lattice, "$.volume") AS ?output_lattice_volume)
  BIND(<{?TASK_ID}_material> as ?material)
  BIND(<{?TASK_ID}_output_pg> AS ?NODE_output_pg)
  BIND(<{?TASK_ID}_output_sg> AS ?NODE_output_sg)
  BIND(fun:JSONPath(?source, "$.spacegroup") AS ?output_sg)
  BIND(fun:JSONPath(?output_sg, "$.symbol") AS ?output_sg_symbol)
  BIND(fun:JSONPath(?output_sg, "$.number") AS ?output_sg_id)
  BIND(fun:JSONPath(?output_sg, "$.point_group") AS ?output_pg_name)
  BIND(fun:JSONPath(?output_sg, "$.crystal_system") AS ?output_lattice_type)
  BIND(BNODE() AS ?NODE_output_a_axis_coordinateVector)
  BIND(BNODE() AS ?NODE_output_b_axis_coordinateVector)
  BIND(BNODE() AS ?NODE_output_c_axis_coordinateVector)
  BIND(BNODE() AS ?NODE_input_a_axis_coordinateVector)
  BIND(BNODE() AS ?NODE_input_b_axis_coordinateVector)
  BIND(BNODE() AS ?NODE_input_c_axis_coordinateVector)
  
}